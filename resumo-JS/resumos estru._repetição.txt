       Comandos break e continue:

 *Comando break:
Para interromper o loop feito em uma estrutura de repetição temos o comando <>break<>. Quando usar esse comando, a iteração é interrompida e a execução do programa continua nas próximas linhas após a estrutura de repetição.


for (let i = 0; i < 10; i++) {
    if (i === 5) {
        break; // Sai do loop quando i é igual a 5
    }
    console.log(i);
}

------------

 *Comando continue:
Outra forma de interromper um laço de repetição que é usar o comando <>continue<>. Com ele apenas a iteração atual do loop é interrompida, passando para a próxima iteração da repetição. Bem diferente do comando break, que termina o laço de repetiçôes sucessivos.


for (let i = 0; i < 10; i++) {
    if (i === 5) {
        continue; // Pula a iteração quando i é igual a 5
    }
    console.log(i);
}


 Caso seja necessário iterar todos os elementos da coleção, use o comando continue. Agora se o objetivo for encontrar apenas um único elemento que atenda a uma determinada condição, o comando break é a melhor opção.
--------------------------------------------------
--------------------------------------------------


 Em JavaScript, as três principais estruturas de repetição são: for, while e do…while. Cada uma tem suas particularidades e é adequada para diferentes situações. Vamos ver as diferenças entre elas:

1. For

 -Uso: Ideal quando você sabe o número exato de iterações que precisa.

 -Características: A estrutura for permite inicializar(criar) uma variável, definir uma condição de continuação e um incremento em uma única linha.

2. While

 -Uso: Útil quando o número de iterações não é conhecido antecipadamente e depende de uma condição.

 -Características: O loop while verifica a condição antes de executar o bloco de código. Se a condição for falsa no início, o bloco pode não ser executado nenhuma vez.

3. Do…While

 -Uso: Similar ao while, mas garante que o bloco de código seja executado pelo menos uma vez.

 -Características: O loop do...while executa o bloco de código primeiro e depois verifica a condição. Isso garante que o código seja executado pelo menos uma vez, independentemente da condição.
--------------------------------------------------
 
 As estruturas for...in e for...of: São formas resumidas e específicas do laço for tradicional
 MINHA OBS: No for... of  e  no  for...in a atribuição é automatica para a variável que à percorre!


	FOR...IN

 A estrutura de repetição for .. in permite que todas as propriedades de um objeto sejam percorridas. 


var pessoa = { nome: "Ana", idade: 25, cidade: "Fortaleza" };
for (let chave in pessoa) {
    console.log(chave); // Imprime: nome, idade, cidade
}


-Características: É ideal para atribuir (chave) da propriedades e não o seu valor em objetos. 


OBS: Seu uso não é recomendado diretamente em arrays, a ordem de iteração não é garantida.


 **E se vc quiser imprimir o valor do objeto e não o nome dele.

for (let chave in pessoa) {
    console.log(pessoa[chave]); // Imprime: nome, idade, cidade
}




	For…Of

 Uso: Para percorrer e atribuir os valores dos objetos interativos (como arrays, strings, mapas, conjuntos, etc.).


 Exemplo:

const numeros = [1, 2, 3, 4, 5];
for (let numero of numeros) {
    console.log(numero); // Imprime: 1, 2, 3, 4, 5
}

Características: É ideal para atribuir valores de arrays e coleção objetos. Não atribui índice(posição).

OBS: Não é recomendado seu uso diretamente em objetos.




 
