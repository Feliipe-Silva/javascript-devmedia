
-------------------FUNÇÃO toFixed()-----------------------------------

	toFixed() em JavaScript é usado para formatar após o ponto fixo. Ele permite especificar números exato de dígitos à direita do ponto decimal.

	--Parâmetros:
dígitos (opcional): O número de dígitos que aparecem após o ponto decimal. Pode ser um valor entre 0 e 20 (inclusive).

----EXEPLOS: 
const num = 12345.6789;
num.toFixed(); // Retorna '12346' (arredondado)
num.toFixed(1); // Retorna '12345.7'
num.toFixed(6); // Retorna '12345.678900'
----------------------------------------------------------------------

-------------------FUNÇÃO parseInt---------------------

	JavaScript é usada para converter uma string em um número inteiro.

  ---Parâmetros:
string: A string que você deseja converter.
base (opcional): Um número que representa a base do sistema numérico. Por exemplo, base 10 é o sistema decimal comum usado por humanos.

  --Comportamento:
A função parseInt analisa a string e retorna um inteiro ou NaN (se não for possível converter).
Ela considera a base especificada para interpretar a string. Por exemplo:
Base 10: Converte de decimal.
Base 16 (hexadecimal): Usa letras de A a F para representar números maiores que 9.
Base 8 (octal): Começa com zero (por exemplo, 021).
Espaços no início e fim da string são permitidos.
-------------------------------------------------------------------------


-------------------FUNÇÃO Math.floor();---------------------

  A função Math.floor() em JavaScript é usada para arredondar um número para baixo até o inteiro mais próximo. Isso significa que ela retorna o número inteiro mais próximo que é menor ou igual ao número fornecido.

 JavaScript:
console.log(Math.floor(4.7));  // Saída: 4
console.log(Math.floor(4.3));  // Saída: 4
console.log(Math.floor(-4.7)); // Saída: -5
console.log(Math.floor(-4.3)); // Saída: -5

 -Uso Prático:

 Arredondamento de Preços: Pode ser usado para arredondar preços para o valor inteiro mais baixo.

 Cálculos de Índices: Útil em cálculos de índices onde você precisa garantir que o índice seja um número inteiro.
-------------------------------------------------------------------------

-------------------FUNÇÃO Math.ramdom();---------------------

 A função Math.random() em JavaScript é usada para gerar um número aleatório de ponto flutuante no intervalo de 0 até -1. Isso significa que o valor retornado será sempre maior ou igual a 0 e menor que 1

 JavaScript:
console.log(Math.random()); // Pode retornar algo como 0.123456789
console.log(Math.random()); // Pode retornar algo como 0.987654321

 Uso Prático:
 -Geração de Números Aleatórios em Intervalos Específicos: Para gerar um número aleatório dentro de um intervalo específico, você pode multiplicar o resultado de Math.random() pelo tamanho do intervalo desejado e, em seguida, ajustar o valor conforme necessário. Por exemplo, para gerar um número entre 0 e 10:

 JavaScript:
let numeroAleatorio = Math.random() * 10;
console.log(numeroAleatorio); // Pode retornar algo como 7.23456789
-------------------------------------------------------------------------

-------------------FUNÇÃO Math.ceil();---------------------

 A função Math.ceil() em JavaScript é usada para arredondar um número para cima até o inteiro mais próximo.

Aqui estão alguns exemplos de como Math.ceil() funciona:

 JavaScript

console.log(Math.ceil(4.3));  // Saída: 5
console.log(Math.ceil(4.7));  // Saída: 5
console.log(Math.ceil(-4.3)); // Saída: -4
console.log(Math.ceil(-4.7)); // Saída: -4

Uso Prático:

 -Arredondamento de Preços: Pode ser usado para arredondar preços para o valor inteiro mais alto.

 -Cálculos de Índices: Útil em cálculos de índices onde você precisa garantir que o índice seja um número inteiro.
-------------------------------------------------------------------------

    ADICIONANDO INDÍCE, SEM REMOVER NENHUM OUTRO!

 Para adicionar um valor no índice [2] de um array em JavaScript sem apagar o valor existente e deslocar os demais elementos para trás, você pode usar o método splice. Aqui está um exemplo de como fazer isso:

--JavaScript--

let array = [1, 2, 3, 4, 5];
let valorParaAdicionar = 99;

// Adiciona o valor no índice 2
array.splice(2, 0, valorParaAdicionar);

console.log(array); // Saída: [1, 2, 99, 3, 4, 5]


 No exemplo acima:

array.splice(2, 0, valorParaAdicionar) insere o valorParaAdicionar no índice 2 sem remover nenhum elemento (o segundo parâmetro 0 indica que nenhum elemento será removido).
--------------------------------------------------