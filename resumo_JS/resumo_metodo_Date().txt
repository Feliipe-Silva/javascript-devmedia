
	COMANDOS DATE();
	------------------

 Conceitos UTC e timestamp:

* UTC: É o Tempo Universal Coordenado. Referência para se calcular os fusos horários. Serve de base!

 - Útil, conseguimos exibir um horário em cada data de fuso horário.

 - Se alguém na china te enviou um email as 21:34 o horário que deve aparecer pra você é 10:34.

--EXEMPLO: 

	BRASIL		UTC		CHINA
	10:34		13:34		21:34
	------		------		------


* TIMESTAMP: É uma representação numérica de uma data UTC. 

 - Através dele conseguimos verificar quanto tempo se passou entre uma data e outra.


 Através do UTC conseguimos manipular uma data independente do fuso horário e através do Timestamp conseguimos verificar a diferença entre uma data e outra.
-------------------------------------------------

	A diferença entre os métodos getTime(); e getMilliseconds();

1. getTime():

* Retorna o timestamp (número total de milissegundos) desde o 1º de janeiro de 1970 (também conhecido como Epoch time ou Unix time).

* Ou seja, ele retorna o tempo total, em milissegundos, que já passou desde essa data.


2. getMilliseconds():

* Retorna apenas os milissegundos (de 0 a 999) da data atual, ou seja, a fração de segundo do objeto Date.

* Ele retorna a parte de milissegundos do tempo representado pelo objeto Date, sem incluir o restante do timestamp.

--Resumo:
* getTime() fornece o tempo total em milissegundos desde 1970.

* getMilliseconds() retorna apenas a parte de milissegundos (de 0 a 999) do tempo atual.


 Esses métodos podem ser usados em conjunto, dependendo do que você precisa ao trabalhar com datas e horários.
-------------------------------------------------

	A diferença entre subtrair o tempo atual e o tempo de uma mensagem diretamente e usar o método getTimezoneOffset()

1. Subtração direta entre o tempo atual e o tempo de uma mensagem:

* Quando você subtrai o tempo atual (new Date().getTime()) do tempo de uma mensagem (ou qualquer outra data armazenada), você está basicamente calculando a diferença absoluta em milissegundos entre dois momentos no tempo.

* Isso pode ser útil para medir intervalos de tempo, como "quantos milissegundos se passaram desde que uma mensagem foi enviada".

--javascript:
let tempoAtual = new Date().getTime();
let tempoMensagem = new Date('2023-10-10T12:00:00').getTime();
let diferenca = tempoAtual - tempoMensagem; 
  //diferença em milissegundos


2. Usando getTimezoneOffset():

* Diferença entre fuso horário do local com o fuso horário de outro lugar!

* O método getTimezoneOffset() retorna a diferença, em minutos, entre o horário local (do fuso horário do navegador/dispositivo) e o UTC (Tempo Universal Coordenado).

* Ele não está relacionado diretamente à passagem do tempo, mas sim ao deslocamento de fuso horário. Por exemplo, se você está no fuso horário UTC-3, o getTimezoneOffset() retornará 180 (que são 3 horas em minutos).

Isso é útil quando você quer ajustar ou normalizar datas e horas entre diferentes fusos horários.

--javascript:
let offset = new Date().getTimezoneOffset(); // Exemplo: 180 (3 horas)


 Diferenças principais:
* Subtração de tempos (método 1) mede intervalos entre dois momentos no tempo (quanto tempo se passou entre o envio de uma mensagem e o tempo atual, por exemplo).

* getTimezoneOffset() (método 2) lida com fusos horários, ajudando a ajustar horários com base na diferença entre o tempo local e o UTC.
-------------------------------------------------


	getTime(); e valueOf();


 Diferença principal:
* getTime(): é um método específico de Date, usado para deixar claro que estamos buscando o timestamp de uma data.

* valueOf(): é um método mais genérico que retorna o valor primitivo de um objeto, e no caso de Date, também retorna o timestamp.
-------------------------------------------------


	A diferença entre os métodos .getHours(); e .getUTCHours();

1. .getHours():
* Retorna a hora da data local (baseada no fuso horário do sistema onde o código está sendo executado).

* Se você estiver no Brasil (UTC-3) e a hora local for 14:00, o método retornará 14.


2. .getUTCHours():
* Retorna a hora no fuso horário UTC (Tempo Universal Coordenado).

* local e retorna o horário como se fosse no UTC.
Se você estiver no Brasil (UTC-3) e a hora local for 14:00, o método retornará 17 (14:00 no Brasil = 17:00 no UTC).


 Diferença principal:
* .getHours(): Retorna a hora conforme o fuso horário local do sistema.

* .getUTCHours(): Retorna a hora no formato UTC, independente do fuso horário local.
-------------------------------------------------

	Getters de conversão:
	----------------------

 O objeto Date possui métodos que retornam uma string com a data completa diferente. Eles são chamados de 'getters de conversão'.

 Métodos do objeto Date(): O métodos anterior sempre retornam um valor do tipo number.

--EXEMPLO: 
.getFullYear()  // 2024
.getMinutes()	// 43
.getDay()	// 1


 Além de number, podemos retorna esses valores convertido em 'string'.

--EXEMPLO:
.toDateString()	// Wed Oct 23 2024

.toTimeString() // 14:14:31 GMT-0300 (Horário Padrão de Brasília)

.toString()	// Wed Oct 23 2024 14:14:31 GMT-0300 (Horário Padrão de Brasília)


 .toString(): Retorna uma string que representa o objeto. Detalhes na sequência abaixo.

  -- dia da semana (em inglês) em 3 letras.
  -- mês (em inglês) com 3 letras.
  -- dia do mês (em número).
  -- ano.
  -- hora minutos e segundos
  -- fuso horário
  -- nome do fuso horário

//Wed Oct 23 2024 14:14:31 GMT-0300 (Horário Padrão de Brasília)


 .toDateString(): Retorna uma string com a data. Detalhes na sequência abaixo.

  -- dia da semana (em inglês) em 3 letras.
  -- mês (em inglês) com 3 letras.
  -- dia do mês (em número).
  -- ano.
  // Wed Oct 23 2024

 .toTimeStrings(): Retorna uma string com o tempo. Detalhes na sequência abaixo.

  -- hora minutos e segundos
  -- fuso horário
  -- nome do fuso horário
  // 14:14:31 GMT-0300 (Horário Padrão de Brasília)

 .toISOString(): Retorna uma string no formato universal (ISO 8601). Ou seja, fuso horário O (UTC). Detalhes na sequência abaixo.

  -- ano.
  -- mês.
  -- dia.
  -- T: Um delimitador entre data e tempo.
  -- HH: Hora no formato de 24 horas (00 a 23).
  -- mm: Minutos (00 a 59).
  -- ss: Segundos (00 a 59).
  -- sss: Milissegundos (000 a 999).
  -- Z: no final indica que o horário está no fuso UTC.
  // imprime: 2024-10-24T17:51:13.174Z

-----------------CONTINUAÇÃO---------------------

  AGORA ACRESCENTANDO 'LOCALE' ENTRE OS MÉTODOS:

 .toLocaleString(): Retorna uma string com apenas a data e o tempo. 

 -- Data e tempo
 // imprime: 24/10/2024, 15:09:29


 .toLocaleDateString(): Retorna string com apenas a data.

 // imprime: 24/10/2024


 .toLocaleTimeString(): Retorna string com apenas o tempo.

  // imprime: 15:25:04
-------------------CONTINUAÇÃO-------------------

	PERSONALIZANDO OS MÉTODO PARA IMPRIME:

const personalizando_data =  {
    weekday: 'long', 	// segunda-feira
    weekday: 'short', 	// seg.
    weekday: 'narrow',	// S

    month: "numeric", 	// 2
    month: "2-digit", 	// 02
    month: "long", 	// Março
    month: "short", 	// Mar
    month: "narrow", 	// M

    year: 'numeric',	 // 2020
    year: '2-digit',	 // 20

    day: 'numeric',	 // 1
    day: '2-digit',	 // 01
};
// sexta-feira, 25 de outubro de 2024

console.log(dataAtual.toLocaleDateString('pt-BR', personalizandoData));

-----------------------------
const personalizandoTempo = {
    hour: 'numeric', // 1
    hour: '2-digit', // 01,

    minute: 'numeric', // 1
    minute: '2-digit', // 01,

    second: 'numeric', // 1
    second: '2-digit', // 01,
  }
// 14:04:36

console.log( dataAtual.toLocaleTimeString('pt-BR', personalizandoTempo) );

-----------------------------------
const personalizandoDataTempo = {
    dateStyle: "full", // segunda-feira, 9 de novembro de 2020
    dateStyle: "long", // 9 de novembro de 2020
    dateStyle: "medium", // 9 de nov. de 2020
    dateStyle: "short", // 09/11/2020

    timeStyle: "full", // 01:05:09 Horário Padrão de Brasília
    timeStyle: "long", // 01:05:09 BRT
    timeStyle: "medium", // 01:05:09
    timeStyle: "short", // 01:05
  }
// 25 de out. de 2024, 14:10:07 Horário Padrão de Brasília

console.log( dataAtual.toLocaleString('pt-BR', personalizandoDataTempo) );

  NO ARRAY, APENAS UMA OPÇÃO VAI SER IMPRESSO TIPO: weekday, month, year, day, hour, minute, second, dateStyle e timeStyle.
-------------------------------------------------

	SETTERS
	--------

 Os métodos setters do objeto Date alteram uma parte específica da data.

- Alteraveis:
* ano
* mês
* dia
* hora (0 à 23)
* minutos (0 à 59)
* segundos (0 à 59)
* millisegundo

--EXEMPLOS: 
const dataAtual = new Date("2020-11-09 01:05:09");
console.log(dataAtual.toDateString());
// Impressão: Mon Nov 09 2020

dataAtual.setTime(886302309000);
console.log(dataAtual.toDateString());
// Impressão: Sun Feb 01 1998

 O método SETTER, também aceita o valor UTC.